#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bio'
require 'libssw'
SSW = LibSSW
require 'optparse'

opts = {
  lib_path: nil,
  nmatch: 2,
  nmismatch: 2,
  nopen: 3,
  next: 1,
  bprotein: false,
  smatrix: nil,
  bpath: false,
  nthr: nil,
  bbest: false,
  bsam: nil, # typo?
  bheader: nil
}

parser = OptionParser.new do |opt|
  opt.version = LibSSW::VERSION
  opt.summary_width = 20
  opt.banner = 'Usage: rbssw [options] <target file> <query file>'
  opt.on('-l', '--sLibPath PATH', String,
         'path of libssw.so') do |v|
           opts[:sLibPath] = v
         end
  opt.on('-m', '--nMatch VAL', Integer,
         'a positive integer as the score for a match',
         "in genome sequence alignment. [#{opts[:nmatch]}]") do |v|
           opts[:nmatch] = v
         end
  opt.on('-x', '--nMismatch VAL', Integer,
         'a positive integer as the score for a mismatch',
         "in genome sequence alignment. [#{opts[:nmismatch]}]") do |v|
           opts[:nmismatch] = v
         end
  opt.on('-o', '--nOpen VAL', Integer,
         'a positive integer as the penalty for the gap opening',
         "in genome sequence alignment. [#{opts[:nopen]}]") do |v|
           opts[:nopen] = v
         end
  opt.on('-e', '--nExt VAL', Integer,
         'a positive integer as the penalty for the gap extension',
         "in genome sequence alignment. [#{opts[:next]}]") do |v|
           opts[:next] = v
         end
  opt.on('-p', '--bProtien', TrueClass,
         'Do protein sequence alignment.',
         "Without this option, do genome sequence alignment. [#{opts[:bprotein]}]") do |v|
           opts[:bprotein] = v
         end
  opt.on('-a', '--sMatrix VAL', String,
         "a file for either Blosum or Pam weight matrix. [#{opts[:smatrix]}]") do |v|
           opts[:smatrix] = v
         end
  opt.on('-c', '--bPath', TrueClass,
         "Return the alignment path. [#{opts[:bpath]}]") do |v|
           opts[:bpath] = v
         end
  opt.on('-f', '--nThr VAL', Integer,
         'a positive integer.',
         'Only output the alignments with the Smith-Waterman score >= N.') do |v|
           opts[:nthr] = v
         end
  opt.on('-r', '--bBest', TrueClass,
         'The best alignment will be picked, between the original read',
         "alignment and the reverse complement read alignment. [#{opts[:bbest]}]") do |v|
           opts[:bbest] = v
         end
  opt.on('-s', '--bSam', TrueClass,
         'Output in SAM format. [no header]') do |v| # TYPO?
           opts[:bsam] = v
         end
  opt.on('-header', '--bHeader', TrueClass,
         'If -s is used, include header in SAM output.') do |v|
           opts[:bheader] = v
         end
end

parser.order!(ARGV)

opts[:target] = ARGV[0]
opts[:query]  = ARGV[1]

lEle = []
dRc = {}
dEle2Int = {}
dInt2Ele = {}
lScore = nil

if opts[:bprotein]
  # load AA score matrix
  if !opts[:smatrix]
    lEle = ['A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K',
            'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V', 'B', 'Z', 'X', '*']
    lEle.each_with_index do |ele, i|
      dEle2Int[ele] = i
      dEle2Int[ele.downcase] = i
      dInt2Ele[i] = ele
    end
    nEleNum = lEle.size
    lScore = SSW::Blosum50
  else
    lEle, dEle2Int, dInt2Ele, lScore = SSW.read_matrix(opts[:smatrix])
  end
elsif !opts[:smatrix]
  # init DNA score matrix
  lEle = %w[A C G T N]
  dRc = { 'A': 'C', 'C': 'G', 'G': 'C', 'T': 'A', 'a': 'C', 'c': 'G', 'g': 'C', 't': 'A' }
  lEle.each_with_index do |ele, i|
    dEle2Int[ele] = i
    dEle2Int[ele.downcase] = i
    dInt2Ele[i] = ele
  end
  # dEle2Int = {'A': 0, 'a': 0, 'C': 1, 'G': 2, 'g': 2, 'c': 1, 'N': 4, 'T': 3, 'n': 4, 't': 3}
  # dInt2Ele = {0: 'A', 1: 'C', 2: 'G', 3: 'T', 4: 'N'}
  nEleNum = lEle.size # 5
  lScore = Array.new(nEleNum**2, 0)
  (nEleNum - 1).times do |i|
    (nEleNum - 1).times do |j|
      lScore[i * nEleNum + j] = if lEle[i] == lEle[j]
                                  opts[:nmatch]
                                else
                                  -opts[:nmismatch]
                                end
    end
  end
  # lScore = [ 2, -2, -2, -2, 0,
  #           -2,  2, -2, -2, 0,
  #           -2, -2,  2, -2, 0,
  #           -2, -2, -2,  2, 0,
  #            0,  0,  0,  0, 0 ]
end

warn 'Reverse complement alignment is not available for protein sequences.' if opts[:bbest] && opts[:bprotein]

# set flag
nFlag = opts[:bpath] ? 2 : 0

# print sam head
if opts[:bsam] && opts[:bheader] && opts[:bpath]
  puts '@HD\tVN:1.4\tSO:queryname'
  Bio::Flatfile.open(opts[:target]) do |f|
    f.each do |entry|
      id  = entry.entry_id
      len = entry.nalen
      puts "@SQ\tSN:#{id}\tLN:#{len}"
    end
  end
elsif opts[:bsam] && !args[:bpath]
  warn 'SAM format output is only available together with option -c.\n'
  opts[:bsam] = false
end

def _to_int(seq, lEle, dEle2Int)
  seq.each_char.map do |ele|
    if dEle2Int.has_key?(ele)
      dEle2Int[ele]
    else
      dEle2Int[lEle[-1]]
    end
  end
end

# iterate query sequenc
Bio::FlatFile.open(opts[:query]) do |query_file|
  query_file.each do |qentry|
    sQId   = qentry.entry_id
    sQSeq  = qentry.sequence_string
    sQQual = qentry.quality_string
    # build query profile
    qNum = _to_int(sQSeq, lEle, dEle2Int)
    qProfile = SSW.ssw_init(qNum, sQSeq.size, lScore, lEle.size, 2)
    # build rc query profile
    if opts[:bbest] && !opts[:bprotein]
      sQRcSeq = sQSeq.reverse.each_char.map { |x| dRc[x] }.join
      qRcNum = _to_int(sQRcSeq, lEle, dEle2Int)
      qRcProfile = SSW.ssw_init(qRcNum, sQSeq.size, mat, lEle.size, 2)
    end
    # set mask le
    if sQSeq.size > 30
      nMaskLen = sQSeq.size / 2
    else
      nMasklen = 15
    end

    # iter target sequence
    Bio::FlatFile.open(opts[:target]) do |target_file|
      target_file.each do |tentry|
        sRId  = tentry.entry_id
        sRSeq = tentry.seq.to_s
        rNum  = _to_int(sRSeq, lEle, dEle2Int)
        res = SSW.ssw_align(
          qProfile, rNum, sRSeq.size, opts[:nopen], opts[:next], nFlag, 0, 0, nMaskLen
        )
        p res.to_h
        resRc = nil
        if opts[:bbest] && !opts[:bprotein]
          resRc = SSW.align_one(
            qRcProfile, rNum, sRSeq.size, opts[:nopen], opts[:next], nFlag, 0, 0, nMaskLen
          )
        end
        # build cigar and trace back path
        strand = 0
      end
    end
  end
end
